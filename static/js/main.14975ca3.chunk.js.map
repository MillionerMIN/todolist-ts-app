{"version":3,"sources":["serviceWorker.ts","api/taskApi.ts","component/AddItemForm/AddItemForm.tsx","component/EditableSpan/EditableSpan.tsx","api/api.ts","component/Tasks/Tasks.tsx","redux/app-reducer.ts","utils/error-utils.ts","redux/todolists-reducer/tasks-reducer.ts","component/Todolist/Todolist.tsx","api/todolistApi.ts","redux/todolists-reducer/todolists-reducer.ts","component/ErrorSnackbar/ErrorSnackbar.tsx","component/App/App.tsx","redux/store.ts","index.tsx","component/Todolist/Todolist.module.css","component/App/App.module.css","component/AddItemForm/AddItemForm.module.css","component/Tasks/Tasks.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","addItem","entityStatus","useState","title","setTitle","error","setError","onAddItem","trim","className","s","textField","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","id","label","variant","helperText","disabled","IconButton","color","size","onClick","Tooltip","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","tasksApi","todolistId","get","post","taskId","model","put","delete","TasksWithRedux","task","onRemoveTask","onChangeTaskStatus","onChangeTitle","onClickHandler","useCallback","onChangStatusHandler","newIsDoneValue","checked","Completed","New","onChangeTitleHandler","newTitle","status","is_done","Checkbox","Delete","initialState","setAppStatus","type","setAppError","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","Todolist","tasks","addTask","changeTitleTodolist","changeFilter","removeTodolist","removeTask","changeTaskStatus","changeTitleTask","useDispatch","useEffect","then","res","items","setTasksAC","catch","err","onAddTask","onRemoveTodolist","onChangeTitleTodolist","allClickHandler","activeClickHandler","completedClickHandler","tasksForTodolist","filter","t","wrapper","map","Button","active_filter","todolistApi","changeTodolistEntityStatus","Alert","elevation","ErrorSnackbars","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","todolists","resultCode","newTask","item","addTaskThunk","removeTaskAC","removeTaskThunk","changeTaskTitle","getState","find","description","completed","priority","startDate","deadline","changeTaskTitleAC","changeTaskTitleThunk","changeTaskStatusAC","warn","changeTaskStatusThunk","removeTodolistAC","addTodolist","todolist","addTodolistThunk","action","newFilterValue","changeTodolistFilterAC","changeTodolistTitleAC","changeTodolistTitleThunk","AppBar","position","Toolbar","edge","Typography","LinearProgress","Container","fixed","Grid","container","style","padding","spacing","tl","Paper","rootReducer","combineReducers","stateCopy","copyState","todoListId","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.14975ca3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { instance } from \"./api\"\n\nexport type TaskType = {\n   id: string\n   todoListId: string\n   title: string\n   description: string\n   completed: boolean\n   status: number\n   priority: number\n   startDate: null | string\n   deadline: null | string\n   order: number\n   addedDate: string\n}\n\nexport enum TaskStatuses {\n   New = 0,\n   InProgress = 1,\n   Completed = 2,\n   Draft = 3\n}\n\nexport enum TaskPriorities {\n   Low = 0,\n   InProgress = 1,\n   Completed = 2,\n   Draft = 3\n}\n\ntype CommplitTasksType<T> = {\n   data: T\n   resultCode: number\n   messages: string[]\n}\n\ntype GetTasksRespons = {\n   error: null | string\n   totalCount: number\n   items: TaskType[]\n}\n\nexport type UpdateTaskModelType = {\n   title?: string\n   description?: string\n   completed?: boolean\n   status?: number\n   priority?: number\n   startDate?: string | null\n   deadline?: string | null\n}\n\nexport const tasksApi = {\n   getTasks(todolistId: string) {\n      return instance.get<GetTasksRespons>(`todo-lists/${todolistId}/tasks`)\n   },\n   creatTasks(todolistId: string, title: string) {\n      return instance.post<CommplitTasksType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, { title })\n   },\n   updateTasks(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n      return instance.put<CommplitTasksType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, { ...model })\n   },\n   deleteTasks(todolistId: string, taskId: string) {\n      return instance.delete<CommplitTasksType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n   }\n}","import { IconButton, TextField, Tooltip } from \"@material-ui/core\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport { RequestStatusType } from '../../redux/app-reducer';\nimport s from './AddItemForm.module.css';\n\nexport type AddItemFormType = {\n   addItem: (title: string) => void\n   entityStatus?: RequestStatusType\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\n   console.log('AddItemForm call');\n   const { addItem, entityStatus } = props\n\n   let [title, setTitle] = useState('');\n   let [error, setError] = useState<string | null>(null);\n\n   const onAddItem = () => {\n      if (title.trim() !== '') {\n         addItem(title);\n         setTitle('');\n      } else {\n         setError('Title is required');\n      }\n   }\n   const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      setTitle(e.currentTarget.value)\n   }\n   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n      if (error !== null) {\n         setError(null);\n      }\n      if (e.charCode === 13) {\n         onAddItem()\n      }\n   }\n\n   return <div className={s.textField}>\n      <TextField\n         value={title}\n         onChange={onChangeHandler}\n         onKeyPress={onKeyPressHandler}\n         error={!!error}\n         id=\"outlined-basic\"\n         label=\"Title\"\n         variant=\"outlined\"\n         helperText={error}\n         disabled={entityStatus === 'loading'}\n      />\n      <IconButton color='primary' size='small' onClick={onAddItem} disabled={entityStatus === 'loading'}>\n         <Tooltip title=\"Add\" aria-label=\"add\">\n            <AddCircleIcon />\n         </Tooltip>\n      </IconButton>\n\n   </div>\n})","import { TextField } from \"@material-ui/core\";\nimport React, { ChangeEvent, useState } from \"react\";\n\n\ntype EditableSpanType = {\n   value: string\n   onChange: (newTitle: string) => void\n}\n\nexport const EditableSpan = React.memo(\n   (props: EditableSpanType) => {\n      console.log('EditableSpan call')\n\n      let [editMode, setEditMode] = useState(false);\n      let [title, setTitle] = useState(\"\");\n\n      const activeteAditMode = () => {\n            setEditMode(true);\n            setTitle(props.value);\n         }\n      const activateViewMode = () => {\n            setEditMode(false);\n            props.onChange(title);\n      }\n      const onChangeValueHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\n\n\n      return editMode\n         ? <TextField label='rename task'\n            variant='outlined'\n            size='small'\n            value={title}\n            onBlur={activateViewMode}\n            autoFocus\n            onChange={onChangeValueHandler} />\n         : <span onDoubleClick={activeteAditMode} >{props.value}</span>\n   }\n)","import axios from \"axios\";\n\nconst settings = {\n   withCredentials: true,\n   headers: {\n      \"API-KEY\": \"c776464e-9336-49f9-96f6-6e3857c87294\",\n   },\n}\n\nexport const instance = axios.create({\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n   ...settings,\n})","import { Checkbox, IconButton, Tooltip } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport React, { ChangeEvent, useCallback } from \"react\";\nimport { EditableSpan } from \"../EditableSpan/EditableSpan\";\n\nimport s from './Tasks.module.css';\nimport { TaskType, TaskStatuses } from '../../api/taskApi';\n\ntype TaskPropsType = {\n   todolistId: string\n   task: TaskType\n   onRemoveTask: (taskId: string, todolistId: string) => void\n   onChangeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\n   onChangeTitle: (taskId: string, newTitle: string, todolistId: string) => void\n}\n\n\nexport const TasksWithRedux = React.memo((props: TaskPropsType) => {\n   const { todolistId, task, onRemoveTask, onChangeTaskStatus, onChangeTitle } = props\n   const onClickHandler = useCallback(() => {\n      onRemoveTask(task.id, todolistId)\n   }, [onRemoveTask, task.id, todolistId])\n\n   const onChangStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n      let newIsDoneValue = e.currentTarget.checked\n      onChangeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\n   }, [onChangeTaskStatus, task.id, todolistId])\n\n   const onChangeTitleHandler = useCallback((newTitle: string) => {\n      onChangeTitle(task.id, newTitle, todolistId)\n   }, [onChangeTitle, task.id, todolistId])\n\n\n   return <div key={task.id} className={task.status === TaskStatuses.Completed ? s.is_done : ''}>\n      <Checkbox color=\"primary\"\n         checked={task.status === TaskStatuses.Completed}\n         onChange={onChangStatusHandler} />\n      <EditableSpan\n         value={task.title}\n         onChange={onChangeTitleHandler}\n      />\n      <Tooltip title=\"Delete\">\n         <IconButton onClick={onClickHandler}>\n            <Delete />\n         </IconButton>\n      </Tooltip>\n   </div>\n\n}\n)","import { AppActionType } from \"./store\"\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\ntype InitialStateType = typeof initialState\n\nconst initialState = {\n  status: 'idle' as RequestStatusType,\n  error: null as null | string\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionType) => {\n  switch (action.type) {\n    case 'APP/SET-STATUS': {\n      return { ...state, status: action.status }\n    }\n    case 'APP/SET-ERROR': {\n      return { ...state, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const setAppStatus = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const);\nexport const setAppError = (error: null | string) => ({ type: 'APP/SET-ERROR', error } as const);\n\n\nexport type SetAppStatusAT = ReturnType<typeof setAppStatus>\nexport type SetAppErrorAT = ReturnType<typeof setAppError>\n\nexport type AppReducerActionType = SetAppStatusAT\n  | SetAppErrorAT","import { Dispatch } from 'redux';\nimport { ResponseType } from '../api/todolistApi';\nimport { setAppError, SetAppErrorAT, setAppStatus, SetAppStatusAT } from '../redux/app-reducer';\n\n\n// generic function \nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n  if (data.messages.length) {\n    debugger\n    dispatch(setAppError(data.messages[0]))\n  } else {\n    dispatch(setAppError('Some error occurred'))\n  }\n  dispatch(setAppStatus('failed'))\n}\n\nexport const handleServerNetworkError = (message: string, dispatch: ErrorUtilsDispatchType) => {\n  dispatch(setAppError(message))\n  dispatch(setAppStatus('failed'))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorAT | SetAppStatusAT>","import { AxiosError } from 'axios';\n\nimport { tasksApi, TaskStatuses, TaskType, UpdateTaskModelType } from '../../api/taskApi';\nimport { TasksStateType } from '../../component/App/App';\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\nimport { setAppStatus, SetAppStatusAT, SetAppErrorAT } from '../app-reducer';\nimport { AppThunk } from '../store';\nimport { AddTodolistAT, RemoveTodolistAT, SetTodolistsAT } from './todolists-reducer';\n\nexport type RemoveTaskAT = ReturnType<typeof removeTaskAC>\nexport type AddTaskAT = ReturnType<typeof addTaskAC>\nexport type ChangeTaskStatusAT = ReturnType<typeof changeTaskStatusAC>\nexport type ChangeTaskTitleAT = ReturnType<typeof changeTaskTitleAC>\nexport type SetTasksType = ReturnType<typeof setTasksAC>\n\nexport type TaskActionsType = RemoveTaskAT\n   | AddTaskAT\n   | ChangeTaskStatusAT\n   | ChangeTaskTitleAT\n   | AddTodolistAT\n   | RemoveTodolistAT\n   | SetTodolistsAT\n   | SetTasksType\n   | SetAppStatusAT\n   | SetAppErrorAT\n\nconst initialState: TasksStateType = {\n   /*\"todolistId1\": [\n       { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n       { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n       { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\n   ],\n   \"todolistId2\": [\n       { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n       { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n       { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\n   ]*/\n}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionsType): TasksStateType => {\n   switch (action.type) {\n      case 'SET_TASKS': {\n         const stateCopy = { ...state }\n         stateCopy[action.todolistId] = action.tasks\n         return stateCopy\n      }\n      case 'REMOVE-TASK': {\n         const copyState = { ...state }\n         copyState[action.todolistId] = copyState[action.todolistId].filter(task => task.id !== action.taskId)\n         return copyState\n      }\n      case 'ADD-TASK': {\n         const stateCopy = { ...state }\n         const tasks = stateCopy[action.task.todoListId]\n         const newTask = [action.task, ...tasks]\n         stateCopy[action.task.todoListId] = newTask\n         return stateCopy\n      }\n      case 'CHANGE-TASK-STATUS': {\n         return {\n            ...state, [action.todolistId]: state[action.todolistId].map(task => {\n               if (task.id === action.id) {\n                  return { ...task, status: action.status }\n               } else {\n                  return task\n               }\n            })\n         }\n      }\n      case 'CHANGE-TASK-TITLE': {\n         return {\n            ...state, [action.todolistId]: state[action.todolistId].map(task =>\n               task.id === action.id ? { ...task, title: action.newTitle } : task)\n         }\n      }\n      case 'ADD-TODOLIST': {\n         return { ...state, [action.todolist.id]: [] }\n      }\n      case 'REMOVE-TODOLIST': {\n         const copyState = { ...state }\n         delete copyState[action.id]\n         return copyState\n      }\n      case 'SET_TODOLISTS': {\n         const stateCopy = { ...state }\n         action.todolists.forEach((tl) => {\n            stateCopy[tl.id] = []\n         })\n         return stateCopy\n      }\n      default:\n         return state;\n   }\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\n   return {\n      type: 'REMOVE-TASK',\n      taskId,\n      todolistId\n   } as const\n}\n\nexport const addTaskAC = (task: TaskType) => {\n   return { type: 'ADD-TASK', task } as const\n}\nexport const changeTaskStatusAC = (id: string, status: TaskStatuses, todolistId: string) => {\n   return { type: 'CHANGE-TASK-STATUS', id, status, todolistId } as const\n}\nexport const changeTaskTitleAC = (id: string, newTitle: string, todolistId: string) => {\n   return { type: 'CHANGE-TASK-TITLE', id, newTitle, todolistId } as const\n}\nexport const setTasksAC = (tasks: TaskType[], todolistId: string) => {\n   return { type: 'SET_TASKS', tasks, todolistId } as const\n}\n\n//Thunk\n\nexport const fetchTasksThunk = (todolistId: string): AppThunk => (dispatch) => {\n   dispatch(setAppStatus('loading'))\n   tasksApi.getTasks(todolistId)\n      .then((res) => {\n         const tasks = res.data.items\n         dispatch(setTasksAC(tasks, todolistId))\n         dispatch(setAppStatus('succeeded'))\n      })\n      .catch((err: AxiosError) => {\n         handleServerNetworkError(err.message, dispatch)\n      })\n}\n\nexport const removeTaskThunk = (todolistId: string, taskId: string): AppThunk => (dispatch) => {\n   dispatch(setAppStatus('loading'))\n   tasksApi.deleteTasks(todolistId, taskId)\n      .then((res) => {\n         if (res.data.resultCode === 0) {\n            dispatch(removeTaskAC(taskId, todolistId))\n            dispatch(setAppStatus('succeeded'))\n         } else {\n            handleServerAppError<{}>(res.data, dispatch)\n         }\n      })\n      .catch((err: AxiosError) => {\n         handleServerNetworkError(err.message, dispatch)\n      })\n}\n\nexport const addTaskThunk = (title: string, todolistId: string): AppThunk => (dispatch) => {\n   dispatch(setAppStatus('loading'))\n   tasksApi.creatTasks(todolistId, title)\n      .then((res) => {\n         if (res.data.resultCode === 0) {\n            let newTask = res.data.data.item\n            dispatch(addTaskAC(newTask))\n            dispatch(setAppStatus('succeeded'))\n         } else {\n            handleServerAppError<{ item: TaskType }>(res.data, dispatch)\n         }\n      })\n      .catch((err: AxiosError) => {\n         handleServerNetworkError(err.message, dispatch)\n      })\n}\n\nexport const changeTaskStatusThunk = (todolistId: string, taskId: string, status: TaskStatuses): AppThunk =>\n   (dispatch, getState) => {\n\n      const state = getState();\n      const task = state.tasks[todolistId].find(task => task.id === taskId)\n\n      if (!task) {\n         console.warn('task not found in the state')\n         return\n      }\n\n      if (task) {\n         let model: UpdateTaskModelType = {\n            title: task.title,\n            description: task.description,\n            completed: task.completed,\n            status: status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n         }\n         dispatch(setAppStatus('loading'))\n         tasksApi.updateTasks(todolistId, taskId, model)\n            .then((res) => {\n               if (res.data.resultCode === 0) {\n                  dispatch(changeTaskStatusAC(taskId, status, todolistId))\n                  dispatch(setAppStatus('succeeded'))\n               } else {\n                  handleServerAppError<TaskType>(res.data, dispatch)\n               }\n            })\n            .catch((err: AxiosError) => {\n               handleServerNetworkError(err.message, dispatch)\n            })\n      }\n   }\n\nexport const changeTaskTitleThunk = (todolistId: string, taskId: string, newTitle: string): AppThunk =>\n   (dispatch, getState) => {\n\n      const state = getState();\n      const task = state.tasks[todolistId].find(task => task.id === taskId);\n\n      if (task) {\n         let model: UpdateTaskModelType = {\n            title: newTitle,\n            description: task.description,\n            completed: task.completed,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n         }\n         dispatch(setAppStatus('loading'))\n         tasksApi.updateTasks(todolistId, taskId, model)\n            .then((res) => {\n               if (res.data.resultCode === 0) {\n                  dispatch(changeTaskTitleAC(taskId, newTitle, todolistId))\n                  dispatch(setAppStatus('succeeded'))\n               } else {\n                  handleServerAppError<TaskType>(res.data, dispatch)\n               }\n            })\n            .catch((err: AxiosError) => {\n               handleServerNetworkError(err.message, dispatch)\n            })\n      }\n   }","import React, { useCallback, useEffect } from 'react';\nimport { AddItemForm } from '../AddItemForm/AddItemForm';\nimport s from './Todolist.module.css';\nimport { EditableSpan } from '../EditableSpan/EditableSpan';\nimport { Button, IconButton, Tooltip } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { TasksWithRedux } from '../Tasks/Tasks';\nimport { useDispatch } from 'react-redux';\nimport { fetchTasksThunk } from '../../redux/todolists-reducer/tasks-reducer';\nimport { TaskStatuses, TaskType } from '../../api/taskApi';\nimport { FilterTodolistType } from '../../redux/todolists-reducer/todolists-reducer';\nimport { RequestStatusType } from '../../redux/app-reducer';\n\ntype TodolistType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    addTask: (title: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    changeFilter: (value: FilterTodolistType, todolistsId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTitleTask: (id: string, newTitle: string, todolistId: string) => void\n    filter: FilterTodolistType\n    entityStatus: RequestStatusType\n    removeTodolist: (id: string) => void\n    changeTitleTodolist: (newTitle: string, todolistId: string) => void\n}\n\nexport const Todolist = React.memo((props: TodolistType) => {\n\n    const { id,\n        title,\n        tasks,\n        addTask,\n        changeTitleTodolist,\n        changeFilter,\n        removeTodolist,\n        removeTask,\n        changeTaskStatus,\n        changeTitleTask,\n        entityStatus, } = props\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchTasksThunk(id))\n    }, [dispatch, id])\n\n    const onAddTask = useCallback((title: string) => {\n        addTask(title, id)\n    }, [addTask, id]);\n\n    const onRemoveTodolist = useCallback(() => {\n        removeTodolist(id)\n    }, [removeTodolist, id])\n\n    const onChangeTitleTodolist = useCallback((newTitle: string) => {\n        changeTitleTodolist(newTitle, id)\n    }, [changeTitleTodolist, id])\n\n    const allClickHandler = useCallback(() => {\n        changeFilter('all', id)\n    }, [changeFilter, id])\n\n    const activeClickHandler = useCallback(() => {\n        changeFilter('active', id)\n    }, [changeFilter, id])\n\n    const completedClickHandler = useCallback(() => {\n        changeFilter('completed', id)\n    }, [changeFilter, id])\n\n    let tasksForTodolist = tasks\n\n    if (props.filter === 'active') {\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    return <div className={s.wrapper}>\n        <h3>\n            <EditableSpan\n                value={title}\n                onChange={onChangeTitleTodolist} />\n            <Tooltip title=\"Delete\">\n                <IconButton onClick={onRemoveTodolist} disabled={entityStatus === 'loading'}>\n                    <Delete />\n                </IconButton>\n            </Tooltip>\n        </h3>\n        <AddItemForm addItem={onAddTask} entityStatus={entityStatus} />\n        <div>\n            {tasksForTodolist.map(t => <TasksWithRedux key={t.id} task={t} todolistId={id}\n                onRemoveTask={removeTask}\n                onChangeTaskStatus={changeTaskStatus}\n                onChangeTitle={changeTitleTask}\n            />)\n            }\n        </div>\n        <div>\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                onClick={allClickHandler}\n                color='default'\n            >All</Button>\n            <Button className={props.filter === 'active' ? s.active_filter : ''}\n                variant={props.filter === 'active' ? 'outlined' : 'text'}\n                onClick={activeClickHandler}\n                color='primary'\n            >Active</Button>\n            <Button className={props.filter === 'completed' ? s.active_filter : ''}\n                variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                onClick={completedClickHandler}\n                color='secondary'\n            >Completed</Button>\n        </div>\n    </div>\n}\n)","import { instance } from \"./api\"\n\nexport type TodolistType = {\n   id: string\n   addedDate: string\n   order: number\n   title: string\n}\n\ntype CommontResponsType<T> = {\n   data: T\n   resultCode: number\n   messages: string[]\n}\n\nexport type ResponseType<D = {}> = {\n   resultCode: number\n   messages: string[]\n   data: D\n}\n\nexport const todolistApi = {\n   getTodolists() {\n      return instance.get<TodolistType[]>('todo-lists',)\n   },\n   createTodolist(title: string) {\n      return instance.post<CommontResponsType<{ item: TodolistType }>>('todo-lists', { title })\n   },\n   updateTodolist(todolistId: string, title: string) {\n      return instance.put<CommontResponsType<{ title: string }>>(`todo-lists/${todolistId}`, { title })\n   },\n   deleteTodolist(todolistId: string) {\n      return instance.delete<CommontResponsType<{}>>(`todo-lists/${todolistId}`)\n   }\n}","import { AxiosError } from 'axios';\nimport { todolistApi, TodolistType } from '../../api/todolistApi';\nimport { setAppStatus, RequestStatusType } from '../app-reducer';\nimport { AppThunk } from '../store';\nimport { handleServerNetworkError, handleServerAppError } from '../../utils/error-utils';\n\nexport type RemoveTodolistAT = ReturnType<typeof removeTodolistAC>\nexport type AddTodolistAT = ReturnType<typeof addTodolistAC>\nexport type ChangeTodolistTitleAT = ReturnType<typeof changeTodolistTitleAC>\nexport type ChangeTodolistFilterAT = ReturnType<typeof changeTodolistFilterAC>\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\nexport type ChangeEntityStatusAT = ReturnType<typeof changeTodolistEntityStatus>\n\nexport type TodolistActionType = RemoveTodolistAT\n   | AddTodolistAT\n   | ChangeTodolistTitleAT\n   | ChangeTodolistFilterAT\n   | SetTodolistsAT\n   | ChangeEntityStatusAT\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport type FilterTodolistType = 'all' | 'active' | 'completed'\nexport type TodolistDomainType = TodolistType & {\n   filter: FilterTodolistType,\n   entityStatus: RequestStatusType\n}\n\nexport const todolistsReducer = (\n   state: TodolistDomainType[] = initialState,\n   action: TodolistActionType): TodolistDomainType[] => {\n   switch (action.type) {\n      case 'REMOVE-TODOLIST':\n         return state.filter(tl => tl.id !== action.id);\n      case 'ADD-TODOLIST':\n         return [{...action.todolist, filter: 'all',entityStatus: 'idle'}, ...state]\n      case 'CHANGE-TODOLIST-TITLE':\n         return state.map(tl => tl.id === action.todolistId ? { ...tl, title: action.title } : tl)\n      case 'CHANGE-TODOLIST-FILTER':\n         return state.map(tl => tl.id === action.todolistId ? { ...tl, filter: action.newFilterValue } : tl)\n      case 'SET_TODOLISTS':\n         return action.todolists.map((tl) => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\n      case 'CHANGE-TODOLIST-ENTITY-STATUS': {\n         return state.map(tl => tl.id === action.id ? ({ ...tl, entityStatus: action.entityStatus }) : tl)\n      }\n      default:\n         return state\n   }\n}\n\nexport const removeTodolistAC = (todolistId: string) => {\n   return { type: 'REMOVE-TODOLIST', id: todolistId } as const\n}\n\nexport const addTodolistAC = (todolist: TodolistType) => {\n   return { type: 'ADD-TODOLIST', todolist } as const\n}\n\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => {\n   return { type: 'CHANGE-TODOLIST-TITLE', todolistId, title } as const\n}\n\nexport const changeTodolistFilterAC = (newFilterValue: FilterTodolistType, todolistId: string) => {\n   return { type: 'CHANGE-TODOLIST-FILTER', newFilterValue, todolistId } as const\n}\n\nexport const setTodolistsAC = (todolists: TodolistType[]) => {\n   return { type: 'SET_TODOLISTS', todolists } as const\n}\n\nexport const changeTodolistEntityStatus = (id: string, entityStatus: RequestStatusType) => ({ type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus } as const)\n\n//Thuk \nexport const fetchTodolistThunk = (): AppThunk => (dispatch) => {\n   dispatch(setAppStatus('loading'))\n   todolistApi.getTodolists()\n      .then((res) => {\n         dispatch(setTodolistsAC(res.data))\n         dispatch(setAppStatus('succeeded'))\n      })\n      .catch((err: AxiosError) => {\n         handleServerNetworkError(err.message, dispatch)\n      })\n}\n\nexport const deleteTodolistThunk = (todolistId: string): AppThunk => (dispatch) => {\n   dispatch(setAppStatus('loading'))\n   dispatch(changeTodolistEntityStatus(todolistId, 'loading'))\n   todolistApi.deleteTodolist(todolistId)\n      .then((res) => {\n         if (res.data.resultCode === 0) {\n            dispatch(removeTodolistAC(todolistId))\n            dispatch(setAppStatus('succeeded'))\n            dispatch(changeTodolistEntityStatus(todolistId, 'succeeded'))\n         } else {\n            handleServerAppError<{}>(res.data, dispatch)\n         }\n      })\n      .catch((err: AxiosError) => {\n         handleServerNetworkError(err.message, dispatch)\n      })\n}\n\nexport const addTodolistThunk = (title: string): AppThunk => (dispatch) => {\n   dispatch(setAppStatus('loading'))\n   todolistApi.createTodolist(title)\n      .then((res) => {\n         if (res.data.resultCode === 0) {\n            dispatch(addTodolistAC(res.data.data.item))\n            dispatch(setAppStatus('succeeded'))\n         } else {\n            handleServerAppError<{ item: TodolistType }>(res.data, dispatch)\n         }\n      })\n      .catch((err: AxiosError) => {\n         debugger\n         handleServerNetworkError(err.message, dispatch)\n      })\n}\n\nexport const changeTodolistTitleThunk = (todolistId: string, title: string): AppThunk => (dispatch) => {\n   dispatch(setAppStatus('loading'))\n   todolistApi.updateTodolist(todolistId, title)\n      .then((res) => {\n         if (res.data.resultCode === 0) {\n            dispatch(changeTodolistTitleAC(todolistId, title))\n            dispatch(setAppStatus('succeeded'))\n         } else {\n            handleServerAppError<{ title: string }>(res.data, dispatch)\n         }\n      })\n      .catch((err: AxiosError) => {\n         handleServerNetworkError(err.message, dispatch)\n      })\n}\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\nimport { setAppError } from '../../redux/app-reducer';\nimport { AppRootStateType } from '../../redux/store';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n\n}\n\nexport function ErrorSnackbars() {\n  // const [open, setOpen] = React.useState(true);\n\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n  const dispatch = useDispatch()\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAppError(null))\n  };\n\n  return (\n    <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\">\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n}","import React, { useCallback, useEffect, } from 'react';\r\nimport s from './App.module.css';\r\nimport { Todolist } from '../Todolist/Todolist';\r\nimport { AddItemForm } from '../AddItemForm/AddItemForm';\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {\r\n    addTodolistThunk,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleThunk,\r\n    deleteTodolistThunk,\r\n    fetchTodolistThunk,\r\n    FilterTodolistType,\r\n    TodolistDomainType\r\n} from '../../redux/todolists-reducer/todolists-reducer';\r\nimport { addTaskThunk, removeTaskThunk, changeTaskStatusThunk, changeTaskTitleThunk } from '../../redux/todolists-reducer/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../redux/store';\r\nimport { TaskStatuses, TaskType } from '../../api/taskApi';\r\nimport { RequestStatusType } from '../../redux/app-reducer';\r\nimport { ErrorSnackbars } from '../ErrorSnackbar/ErrorSnackbar';\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistThunk())\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback(\r\n        (title: string, todolistId: string) => {\r\n            dispatch(addTaskThunk(title, todolistId))\r\n        },\r\n        [dispatch],\r\n    )\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskThunk(todolistId, id))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleThunk(todolistId, id, newTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(changeTaskStatusThunk(todolistId, id, status))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(deleteTodolistThunk(id))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistThunk(title))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterTodolistType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(value, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTitleTodolist = useCallback((title: string, todolistId: string) => {\r\n        dispatch(changeTodolistTitleThunk(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            <ErrorSnackbars />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" >\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{ padding: '20px' }}>\r\n                    <AddItemForm addItem={addTodolist} entityStatus={status}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n\r\n                            return <Grid key={tl.id} item>\r\n                                <Paper elevation={3}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        entityStatus={tl.entityStatus}\r\n                                        addTask={addTask}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        changeTitleTask={changeTaskTitle}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTitleTodolist={changeTitleTodolist}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import { TaskActionsType, tasksReducer } from './todolists-reducer/tasks-reducer';\nimport { TodolistActionType, todolistsReducer } from './todolists-reducer/todolists-reducer';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk, { ThunkAction } from 'redux-thunk';\nimport { appReducer, AppReducerActionType } from './app-reducer';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n   tasks: tasksReducer,\n   todolists: todolistsReducer,\n   app: appReducer,\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n//типизатия всех экшенов для всего App\nexport type AppActionType = TodolistActionType\n   | TaskActionsType\n   | AppReducerActionType\n//типизация для всех thunk\nexport type AppThunk<ReturnType = void> = ThunkAction<\n   ReturnType,\n   AppRootStateType,\n   unknown,\n   AppActionType\n>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './component/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './component/App/App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n   <Provider store={store}>\r\n      <App />\r\n   </Provider>\r\n   , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Todolist_wrapper__2bTnM\",\"error\":\"Todolist_error__KgnzM\",\"error_message\":\"Todolist_error_message__1Jtf2\",\"active_filter\":\"Todolist_active_filter__1Pslf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2-W1N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textField\":\"AddItemForm_textField__4dGrf\",\"error\":\"AddItemForm_error__9krIR\",\"error_message\":\"AddItemForm_error_message__1tFgy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Tasks_is_done__2MaXB\"};"],"sourceRoot":""}